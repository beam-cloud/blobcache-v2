// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package blobcache_fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GetContentResponseT struct {
	Ok bool `json:"ok"`
	Content []byte `json:"content"`
}

func (t *GetContentResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	contentOffset := flatbuffers.UOffsetT(0)
	if t.Content != nil {
		contentOffset = builder.CreateByteString(t.Content)
	}
	GetContentResponseStart(builder)
	GetContentResponseAddOk(builder, t.Ok)
	GetContentResponseAddContent(builder, contentOffset)
	return GetContentResponseEnd(builder)
}

func (rcv *GetContentResponse) UnPackTo(t *GetContentResponseT) {
	t.Ok = rcv.Ok()
	t.Content = rcv.ContentBytes()
}

func (rcv *GetContentResponse) UnPack() *GetContentResponseT {
	if rcv == nil {
		return nil
	}
	t := &GetContentResponseT{}
	rcv.UnPackTo(t)
	return t
}

type GetContentResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsGetContentResponse(buf []byte, offset flatbuffers.UOffsetT) *GetContentResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GetContentResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishGetContentResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGetContentResponse(buf []byte, offset flatbuffers.UOffsetT) *GetContentResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GetContentResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGetContentResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GetContentResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GetContentResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GetContentResponse) Ok() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *GetContentResponse) MutateOk(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *GetContentResponse) Content(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *GetContentResponse) ContentLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GetContentResponse) ContentBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GetContentResponse) MutateContent(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func GetContentResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func GetContentResponseAddOk(builder *flatbuffers.Builder, ok bool) {
	builder.PrependBoolSlot(0, ok, false)
}
func GetContentResponseAddContent(builder *flatbuffers.Builder, content flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(content), 0)
}
func GetContentResponseStartContentVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func GetContentResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
