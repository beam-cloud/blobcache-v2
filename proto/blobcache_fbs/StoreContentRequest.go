// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package blobcache_fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StoreContentRequestT struct {
	Content []byte `json:"content"`
}

func (t *StoreContentRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	contentOffset := flatbuffers.UOffsetT(0)
	if t.Content != nil {
		contentOffset = builder.CreateByteString(t.Content)
	}
	StoreContentRequestStart(builder)
	StoreContentRequestAddContent(builder, contentOffset)
	return StoreContentRequestEnd(builder)
}

func (rcv *StoreContentRequest) UnPackTo(t *StoreContentRequestT) {
	t.Content = rcv.ContentBytes()
}

func (rcv *StoreContentRequest) UnPack() *StoreContentRequestT {
	if rcv == nil {
		return nil
	}
	t := &StoreContentRequestT{}
	rcv.UnPackTo(t)
	return t
}

type StoreContentRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsStoreContentRequest(buf []byte, offset flatbuffers.UOffsetT) *StoreContentRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StoreContentRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishStoreContentRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsStoreContentRequest(buf []byte, offset flatbuffers.UOffsetT) *StoreContentRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StoreContentRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedStoreContentRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *StoreContentRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StoreContentRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StoreContentRequest) Content(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *StoreContentRequest) ContentLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StoreContentRequest) ContentBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StoreContentRequest) MutateContent(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func StoreContentRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func StoreContentRequestAddContent(builder *flatbuffers.Builder, content flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(content), 0)
}
func StoreContentRequestStartContentVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func StoreContentRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
