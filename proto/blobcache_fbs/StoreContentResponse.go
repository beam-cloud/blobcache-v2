// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package blobcache_fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StoreContentResponseT struct {
	Hash string `json:"hash"`
}

func (t *StoreContentResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	hashOffset := flatbuffers.UOffsetT(0)
	if t.Hash != "" {
		hashOffset = builder.CreateString(t.Hash)
	}
	StoreContentResponseStart(builder)
	StoreContentResponseAddHash(builder, hashOffset)
	return StoreContentResponseEnd(builder)
}

func (rcv *StoreContentResponse) UnPackTo(t *StoreContentResponseT) {
	t.Hash = string(rcv.Hash())
}

func (rcv *StoreContentResponse) UnPack() *StoreContentResponseT {
	if rcv == nil {
		return nil
	}
	t := &StoreContentResponseT{}
	rcv.UnPackTo(t)
	return t
}

type StoreContentResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsStoreContentResponse(buf []byte, offset flatbuffers.UOffsetT) *StoreContentResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StoreContentResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishStoreContentResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsStoreContentResponse(buf []byte, offset flatbuffers.UOffsetT) *StoreContentResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StoreContentResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedStoreContentResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *StoreContentResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StoreContentResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StoreContentResponse) Hash() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func StoreContentResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func StoreContentResponseAddHash(builder *flatbuffers.Builder, hash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(hash), 0)
}
func StoreContentResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
