// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package blobcache_fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StoreContentFromSourceResponseT struct {
	Ok bool `json:"ok"`
	Hash string `json:"hash"`
}

func (t *StoreContentFromSourceResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	hashOffset := flatbuffers.UOffsetT(0)
	if t.Hash != "" {
		hashOffset = builder.CreateString(t.Hash)
	}
	StoreContentFromSourceResponseStart(builder)
	StoreContentFromSourceResponseAddOk(builder, t.Ok)
	StoreContentFromSourceResponseAddHash(builder, hashOffset)
	return StoreContentFromSourceResponseEnd(builder)
}

func (rcv *StoreContentFromSourceResponse) UnPackTo(t *StoreContentFromSourceResponseT) {
	t.Ok = rcv.Ok()
	t.Hash = string(rcv.Hash())
}

func (rcv *StoreContentFromSourceResponse) UnPack() *StoreContentFromSourceResponseT {
	if rcv == nil {
		return nil
	}
	t := &StoreContentFromSourceResponseT{}
	rcv.UnPackTo(t)
	return t
}

type StoreContentFromSourceResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsStoreContentFromSourceResponse(buf []byte, offset flatbuffers.UOffsetT) *StoreContentFromSourceResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StoreContentFromSourceResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishStoreContentFromSourceResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsStoreContentFromSourceResponse(buf []byte, offset flatbuffers.UOffsetT) *StoreContentFromSourceResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StoreContentFromSourceResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedStoreContentFromSourceResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *StoreContentFromSourceResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StoreContentFromSourceResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StoreContentFromSourceResponse) Ok() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *StoreContentFromSourceResponse) MutateOk(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *StoreContentFromSourceResponse) Hash() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func StoreContentFromSourceResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func StoreContentFromSourceResponseAddOk(builder *flatbuffers.Builder, ok bool) {
	builder.PrependBoolSlot(0, ok, false)
}
func StoreContentFromSourceResponseAddHash(builder *flatbuffers.Builder, hash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(hash), 0)
}
func StoreContentFromSourceResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
