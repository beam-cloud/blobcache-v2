// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package blobcache_fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GetStateResponseT struct {
	Version string `json:"version"`
	CapacityUsagePct float32 `json:"capacity_usage_pct"`
	PrivateIpAddr string `json:"private_ip_addr"`
}

func (t *GetStateResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	versionOffset := flatbuffers.UOffsetT(0)
	if t.Version != "" {
		versionOffset = builder.CreateString(t.Version)
	}
	privateIpAddrOffset := flatbuffers.UOffsetT(0)
	if t.PrivateIpAddr != "" {
		privateIpAddrOffset = builder.CreateString(t.PrivateIpAddr)
	}
	GetStateResponseStart(builder)
	GetStateResponseAddVersion(builder, versionOffset)
	GetStateResponseAddCapacityUsagePct(builder, t.CapacityUsagePct)
	GetStateResponseAddPrivateIpAddr(builder, privateIpAddrOffset)
	return GetStateResponseEnd(builder)
}

func (rcv *GetStateResponse) UnPackTo(t *GetStateResponseT) {
	t.Version = string(rcv.Version())
	t.CapacityUsagePct = rcv.CapacityUsagePct()
	t.PrivateIpAddr = string(rcv.PrivateIpAddr())
}

func (rcv *GetStateResponse) UnPack() *GetStateResponseT {
	if rcv == nil {
		return nil
	}
	t := &GetStateResponseT{}
	rcv.UnPackTo(t)
	return t
}

type GetStateResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsGetStateResponse(buf []byte, offset flatbuffers.UOffsetT) *GetStateResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GetStateResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishGetStateResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGetStateResponse(buf []byte, offset flatbuffers.UOffsetT) *GetStateResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GetStateResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGetStateResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GetStateResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GetStateResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GetStateResponse) Version() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GetStateResponse) CapacityUsagePct() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GetStateResponse) MutateCapacityUsagePct(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *GetStateResponse) PrivateIpAddr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func GetStateResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func GetStateResponseAddVersion(builder *flatbuffers.Builder, version flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(version), 0)
}
func GetStateResponseAddCapacityUsagePct(builder *flatbuffers.Builder, capacityUsagePct float32) {
	builder.PrependFloat32Slot(1, capacityUsagePct, 0.0)
}
func GetStateResponseAddPrivateIpAddr(builder *flatbuffers.Builder, privateIpAddr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(privateIpAddr), 0)
}
func GetStateResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
