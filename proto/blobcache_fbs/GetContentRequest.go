// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package blobcache_fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GetContentRequestT struct {
	Hash string `json:"hash"`
	Offset int64 `json:"offset"`
	Length int64 `json:"length"`
}

func (t *GetContentRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	hashOffset := flatbuffers.UOffsetT(0)
	if t.Hash != "" {
		hashOffset = builder.CreateString(t.Hash)
	}
	GetContentRequestStart(builder)
	GetContentRequestAddHash(builder, hashOffset)
	GetContentRequestAddOffset(builder, t.Offset)
	GetContentRequestAddLength(builder, t.Length)
	return GetContentRequestEnd(builder)
}

func (rcv *GetContentRequest) UnPackTo(t *GetContentRequestT) {
	t.Hash = string(rcv.Hash())
	t.Offset = rcv.Offset()
	t.Length = rcv.Length()
}

func (rcv *GetContentRequest) UnPack() *GetContentRequestT {
	if rcv == nil {
		return nil
	}
	t := &GetContentRequestT{}
	rcv.UnPackTo(t)
	return t
}

type GetContentRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsGetContentRequest(buf []byte, offset flatbuffers.UOffsetT) *GetContentRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GetContentRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishGetContentRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGetContentRequest(buf []byte, offset flatbuffers.UOffsetT) *GetContentRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GetContentRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGetContentRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GetContentRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GetContentRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GetContentRequest) Hash() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GetContentRequest) Offset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetContentRequest) MutateOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *GetContentRequest) Length() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetContentRequest) MutateLength(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func GetContentRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func GetContentRequestAddHash(builder *flatbuffers.Builder, hash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(hash), 0)
}
func GetContentRequestAddOffset(builder *flatbuffers.Builder, offset int64) {
	builder.PrependInt64Slot(1, offset, 0)
}
func GetContentRequestAddLength(builder *flatbuffers.Builder, length int64) {
	builder.PrependInt64Slot(2, length, 0)
}
func GetContentRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
