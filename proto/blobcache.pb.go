// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v4.25.1
// source: blobcache.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash   string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`      // Hash of the content to retrieve
	Offset int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"` // Offset into the content
	Length int64  `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"` // Length of the content to retrieve
}

func (x *GetContentRequest) Reset() {
	*x = GetContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContentRequest) ProtoMessage() {}

func (x *GetContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContentRequest.ProtoReflect.Descriptor instead.
func (*GetContentRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{0}
}

func (x *GetContentRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *GetContentRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetContentRequest) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

type GetContentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok      bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"` // Content data
}

func (x *GetContentResponse) Reset() {
	*x = GetContentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContentResponse) ProtoMessage() {}

func (x *GetContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContentResponse.ProtoReflect.Descriptor instead.
func (*GetContentResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{1}
}

func (x *GetContentResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *GetContentResponse) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type HasContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"` // Hash of the content to check
}

func (x *HasContentRequest) Reset() {
	*x = HasContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasContentRequest) ProtoMessage() {}

func (x *HasContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasContentRequest.ProtoReflect.Descriptor instead.
func (*HasContentRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{2}
}

func (x *HasContentRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type HasContentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok     bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Exists bool `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *HasContentResponse) Reset() {
	*x = HasContentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasContentResponse) ProtoMessage() {}

func (x *HasContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasContentResponse.ProtoReflect.Descriptor instead.
func (*HasContentResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{3}
}

func (x *HasContentResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *HasContentResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type StoreContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *StoreContentRequest) Reset() {
	*x = StoreContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreContentRequest) ProtoMessage() {}

func (x *StoreContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreContentRequest.ProtoReflect.Descriptor instead.
func (*StoreContentRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{4}
}

func (x *StoreContentRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type StoreContentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok   bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"` // Hash of the stored content
}

func (x *StoreContentResponse) Reset() {
	*x = StoreContentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreContentResponse) ProtoMessage() {}

func (x *StoreContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreContentResponse.ProtoReflect.Descriptor instead.
func (*StoreContentResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{5}
}

func (x *StoreContentResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *StoreContentResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type StoreContentFromSourceWithLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash                string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"` // Hash of the stored content
	Ok                  bool   `protobuf:"varint,2,opt,name=ok,proto3" json:"ok,omitempty"`
	FailedToAcquireLock bool   `protobuf:"varint,3,opt,name=failed_to_acquire_lock,json=failedToAcquireLock,proto3" json:"failed_to_acquire_lock,omitempty"`
	ErrorMsg            string `protobuf:"bytes,4,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *StoreContentFromSourceWithLockResponse) Reset() {
	*x = StoreContentFromSourceWithLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreContentFromSourceWithLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreContentFromSourceWithLockResponse) ProtoMessage() {}

func (x *StoreContentFromSourceWithLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreContentFromSourceWithLockResponse.ProtoReflect.Descriptor instead.
func (*StoreContentFromSourceWithLockResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{6}
}

func (x *StoreContentFromSourceWithLockResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *StoreContentFromSourceWithLockResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *StoreContentFromSourceWithLockResponse) GetFailedToAcquireLock() bool {
	if x != nil {
		return x.FailedToAcquireLock
	}
	return false
}

func (x *StoreContentFromSourceWithLockResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type GetStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStateRequest) Reset() {
	*x = GetStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateRequest) ProtoMessage() {}

func (x *GetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateRequest.ProtoReflect.Descriptor instead.
func (*GetStateRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{7}
}

type GetStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok               bool    `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Version          string  `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	CapacityUsagePct float32 `protobuf:"fixed32,3,opt,name=capacity_usage_pct,json=capacityUsagePct,proto3" json:"capacity_usage_pct,omitempty"`
	PrivateIpAddr    string  `protobuf:"bytes,4,opt,name=private_ip_addr,json=privateIpAddr,proto3" json:"private_ip_addr,omitempty"`
}

func (x *GetStateResponse) Reset() {
	*x = GetStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateResponse) ProtoMessage() {}

func (x *GetStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateResponse.ProtoReflect.Descriptor instead.
func (*GetStateResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{8}
}

func (x *GetStateResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *GetStateResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetStateResponse) GetCapacityUsagePct() float32 {
	if x != nil {
		return x.CapacityUsagePct
	}
	return 0
}

func (x *GetStateResponse) GetPrivateIpAddr() string {
	if x != nil {
		return x.PrivateIpAddr
	}
	return ""
}

type CacheSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path        string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	BucketName  string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	Region      string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	EndpointUrl string `protobuf:"bytes,4,opt,name=endpoint_url,json=endpointUrl,proto3" json:"endpoint_url,omitempty"`
	AccessKey   string `protobuf:"bytes,5,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey   string `protobuf:"bytes,6,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (x *CacheSource) Reset() {
	*x = CacheSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheSource) ProtoMessage() {}

func (x *CacheSource) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheSource.ProtoReflect.Descriptor instead.
func (*CacheSource) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{9}
}

func (x *CacheSource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CacheSource) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *CacheSource) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CacheSource) GetEndpointUrl() string {
	if x != nil {
		return x.EndpointUrl
	}
	return ""
}

func (x *CacheSource) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *CacheSource) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type StoreContentFromSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *CacheSource `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *StoreContentFromSourceRequest) Reset() {
	*x = StoreContentFromSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreContentFromSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreContentFromSourceRequest) ProtoMessage() {}

func (x *StoreContentFromSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreContentFromSourceRequest.ProtoReflect.Descriptor instead.
func (*StoreContentFromSourceRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{10}
}

func (x *StoreContentFromSourceRequest) GetSource() *CacheSource {
	if x != nil {
		return x.Source
	}
	return nil
}

type StoreContentFromSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Hash     string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	ErrorMsg string `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *StoreContentFromSourceResponse) Reset() {
	*x = StoreContentFromSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreContentFromSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreContentFromSourceResponse) ProtoMessage() {}

func (x *StoreContentFromSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreContentFromSourceResponse.ProtoReflect.Descriptor instead.
func (*StoreContentFromSourceResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{11}
}

func (x *StoreContentFromSourceResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *StoreContentFromSourceResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *StoreContentFromSourceResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type GetAvailableHostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locality string `protobuf:"bytes,1,opt,name=locality,proto3" json:"locality,omitempty"`
}

func (x *GetAvailableHostsRequest) Reset() {
	*x = GetAvailableHostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableHostsRequest) ProtoMessage() {}

func (x *GetAvailableHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableHostsRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableHostsRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{12}
}

func (x *GetAvailableHostsRequest) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

type GetAvailableHostsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok    bool             `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Hosts []*BlobCacheHost `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
}

func (x *GetAvailableHostsResponse) Reset() {
	*x = GetAvailableHostsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableHostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableHostsResponse) ProtoMessage() {}

func (x *GetAvailableHostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableHostsResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableHostsResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{13}
}

func (x *GetAvailableHostsResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *GetAvailableHostsResponse) GetHosts() []*BlobCacheHost {
	if x != nil {
		return x.Hosts
	}
	return nil
}

type GetRegionConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locality string `protobuf:"bytes,1,opt,name=locality,proto3" json:"locality,omitempty"`
}

func (x *GetRegionConfigRequest) Reset() {
	*x = GetRegionConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionConfigRequest) ProtoMessage() {}

func (x *GetRegionConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionConfigRequest.ProtoReflect.Descriptor instead.
func (*GetRegionConfigRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{14}
}

func (x *GetRegionConfigRequest) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

type GetRegionConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok           bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	ServerConfig *BlobCacheServerConfig `protobuf:"bytes,2,opt,name=server_config,json=serverConfig,proto3" json:"server_config,omitempty"`
}

func (x *GetRegionConfigResponse) Reset() {
	*x = GetRegionConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionConfigResponse) ProtoMessage() {}

func (x *GetRegionConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionConfigResponse.ProtoReflect.Descriptor instead.
func (*GetRegionConfigResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{15}
}

func (x *GetRegionConfigResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *GetRegionConfigResponse) GetServerConfig() *BlobCacheServerConfig {
	if x != nil {
		return x.ServerConfig
	}
	return nil
}

type BlobCacheServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode                 string          `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	DiskCacheDir         string          `protobuf:"bytes,2,opt,name=disk_cache_dir,json=diskCacheDir,proto3" json:"disk_cache_dir,omitempty"`
	DiskCacheMaxUsagePct float32         `protobuf:"fixed32,3,opt,name=disk_cache_max_usage_pct,json=diskCacheMaxUsagePct,proto3" json:"disk_cache_max_usage_pct,omitempty"`
	MaxCachePct          int64           `protobuf:"varint,4,opt,name=max_cache_pct,json=maxCachePct,proto3" json:"max_cache_pct,omitempty"`
	PageSizeBytes        int64           `protobuf:"varint,5,opt,name=page_size_bytes,json=pageSizeBytes,proto3" json:"page_size_bytes,omitempty"`
	ObjectTtlS           int64           `protobuf:"varint,6,opt,name=object_ttl_s,json=objectTtlS,proto3" json:"object_ttl_s,omitempty"`
	PrettyLogs           bool            `protobuf:"varint,7,opt,name=pretty_logs,json=prettyLogs,proto3" json:"pretty_logs,omitempty"`
	Token                string          `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	DownloadConcurrency  int64           `protobuf:"varint,9,opt,name=download_concurrency,json=downloadConcurrency,proto3" json:"download_concurrency,omitempty"`
	DownloadChunkSize    int64           `protobuf:"varint,10,opt,name=download_chunk_size,json=downloadChunkSize,proto3" json:"download_chunk_size,omitempty"`
	Sources              []*SourceConfig `protobuf:"bytes,11,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *BlobCacheServerConfig) Reset() {
	*x = BlobCacheServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobCacheServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobCacheServerConfig) ProtoMessage() {}

func (x *BlobCacheServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobCacheServerConfig.ProtoReflect.Descriptor instead.
func (*BlobCacheServerConfig) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{16}
}

func (x *BlobCacheServerConfig) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *BlobCacheServerConfig) GetDiskCacheDir() string {
	if x != nil {
		return x.DiskCacheDir
	}
	return ""
}

func (x *BlobCacheServerConfig) GetDiskCacheMaxUsagePct() float32 {
	if x != nil {
		return x.DiskCacheMaxUsagePct
	}
	return 0
}

func (x *BlobCacheServerConfig) GetMaxCachePct() int64 {
	if x != nil {
		return x.MaxCachePct
	}
	return 0
}

func (x *BlobCacheServerConfig) GetPageSizeBytes() int64 {
	if x != nil {
		return x.PageSizeBytes
	}
	return 0
}

func (x *BlobCacheServerConfig) GetObjectTtlS() int64 {
	if x != nil {
		return x.ObjectTtlS
	}
	return 0
}

func (x *BlobCacheServerConfig) GetPrettyLogs() bool {
	if x != nil {
		return x.PrettyLogs
	}
	return false
}

func (x *BlobCacheServerConfig) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *BlobCacheServerConfig) GetDownloadConcurrency() int64 {
	if x != nil {
		return x.DownloadConcurrency
	}
	return 0
}

func (x *BlobCacheServerConfig) GetDownloadChunkSize() int64 {
	if x != nil {
		return x.DownloadChunkSize
	}
	return 0
}

func (x *BlobCacheServerConfig) GetSources() []*SourceConfig {
	if x != nil {
		return x.Sources
	}
	return nil
}

type SourceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode           string            `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	FilesystemName string            `protobuf:"bytes,2,opt,name=filesystem_name,json=filesystemName,proto3" json:"filesystem_name,omitempty"`
	FilesystemPath string            `protobuf:"bytes,3,opt,name=filesystem_path,json=filesystemPath,proto3" json:"filesystem_path,omitempty"`
	Juicefs        *JuiceFSConfig    `protobuf:"bytes,4,opt,name=juicefs,proto3" json:"juicefs,omitempty"`
	Mountpoint     *MountPointConfig `protobuf:"bytes,5,opt,name=mountpoint,proto3" json:"mountpoint,omitempty"`
}

func (x *SourceConfig) Reset() {
	*x = SourceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceConfig) ProtoMessage() {}

func (x *SourceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceConfig.ProtoReflect.Descriptor instead.
func (*SourceConfig) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{17}
}

func (x *SourceConfig) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *SourceConfig) GetFilesystemName() string {
	if x != nil {
		return x.FilesystemName
	}
	return ""
}

func (x *SourceConfig) GetFilesystemPath() string {
	if x != nil {
		return x.FilesystemPath
	}
	return ""
}

func (x *SourceConfig) GetJuicefs() *JuiceFSConfig {
	if x != nil {
		return x.Juicefs
	}
	return nil
}

func (x *SourceConfig) GetMountpoint() *MountPointConfig {
	if x != nil {
		return x.Mountpoint
	}
	return nil
}

type JuiceFSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedisUri  string `protobuf:"bytes,1,opt,name=redis_uri,json=redisUri,proto3" json:"redis_uri,omitempty"`
	Bucket    string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	AccessKey string `protobuf:"bytes,3,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey string `protobuf:"bytes,4,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (x *JuiceFSConfig) Reset() {
	*x = JuiceFSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JuiceFSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JuiceFSConfig) ProtoMessage() {}

func (x *JuiceFSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JuiceFSConfig.ProtoReflect.Descriptor instead.
func (*JuiceFSConfig) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{18}
}

func (x *JuiceFSConfig) GetRedisUri() string {
	if x != nil {
		return x.RedisUri
	}
	return ""
}

func (x *JuiceFSConfig) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *JuiceFSConfig) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *JuiceFSConfig) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type MountPointConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName     string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	AccessKey      string `protobuf:"bytes,2,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey      string `protobuf:"bytes,3,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Region         string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	EndpointUrl    string `protobuf:"bytes,5,opt,name=endpoint_url,json=endpointUrl,proto3" json:"endpoint_url,omitempty"`
	ForcePathStyle bool   `protobuf:"varint,6,opt,name=force_path_style,json=forcePathStyle,proto3" json:"force_path_style,omitempty"`
}

func (x *MountPointConfig) Reset() {
	*x = MountPointConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountPointConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountPointConfig) ProtoMessage() {}

func (x *MountPointConfig) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountPointConfig.ProtoReflect.Descriptor instead.
func (*MountPointConfig) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{19}
}

func (x *MountPointConfig) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *MountPointConfig) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *MountPointConfig) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *MountPointConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MountPointConfig) GetEndpointUrl() string {
	if x != nil {
		return x.EndpointUrl
	}
	return ""
}

func (x *MountPointConfig) GetForcePathStyle() bool {
	if x != nil {
		return x.ForcePathStyle
	}
	return false
}

type BlobCacheHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId           string  `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Addr             string  `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	PrivateIpAddr    string  `protobuf:"bytes,3,opt,name=private_ip_addr,json=privateIpAddr,proto3" json:"private_ip_addr,omitempty"`
	CapacityUsagePct float32 `protobuf:"fixed32,4,opt,name=capacity_usage_pct,json=capacityUsagePct,proto3" json:"capacity_usage_pct,omitempty"`
}

func (x *BlobCacheHost) Reset() {
	*x = BlobCacheHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobCacheHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobCacheHost) ProtoMessage() {}

func (x *BlobCacheHost) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobCacheHost.ProtoReflect.Descriptor instead.
func (*BlobCacheHost) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{20}
}

func (x *BlobCacheHost) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *BlobCacheHost) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *BlobCacheHost) GetPrivateIpAddr() string {
	if x != nil {
		return x.PrivateIpAddr
	}
	return ""
}

func (x *BlobCacheHost) GetCapacityUsagePct() float32 {
	if x != nil {
		return x.CapacityUsagePct
	}
	return 0
}

type SetClientLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash   string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	HostId string `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
}

func (x *SetClientLockRequest) Reset() {
	*x = SetClientLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetClientLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetClientLockRequest) ProtoMessage() {}

func (x *SetClientLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetClientLockRequest.ProtoReflect.Descriptor instead.
func (*SetClientLockRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{21}
}

func (x *SetClientLockRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SetClientLockRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

type SetClientLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *SetClientLockResponse) Reset() {
	*x = SetClientLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetClientLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetClientLockResponse) ProtoMessage() {}

func (x *SetClientLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetClientLockResponse.ProtoReflect.Descriptor instead.
func (*SetClientLockResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{22}
}

func (x *SetClientLockResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type RemoveClientLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash   string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	HostId string `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
}

func (x *RemoveClientLockRequest) Reset() {
	*x = RemoveClientLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveClientLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveClientLockRequest) ProtoMessage() {}

func (x *RemoveClientLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveClientLockRequest.ProtoReflect.Descriptor instead.
func (*RemoveClientLockRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{23}
}

func (x *RemoveClientLockRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *RemoveClientLockRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

type RemoveClientLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *RemoveClientLockResponse) Reset() {
	*x = RemoveClientLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveClientLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveClientLockResponse) ProtoMessage() {}

func (x *RemoveClientLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveClientLockResponse.ProtoReflect.Descriptor instead.
func (*RemoveClientLockResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{24}
}

func (x *RemoveClientLockResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type SetStoreFromContentLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locality   string `protobuf:"bytes,1,opt,name=locality,proto3" json:"locality,omitempty"`
	SourcePath string `protobuf:"bytes,2,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`
}

func (x *SetStoreFromContentLockRequest) Reset() {
	*x = SetStoreFromContentLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStoreFromContentLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStoreFromContentLockRequest) ProtoMessage() {}

func (x *SetStoreFromContentLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStoreFromContentLockRequest.ProtoReflect.Descriptor instead.
func (*SetStoreFromContentLockRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{25}
}

func (x *SetStoreFromContentLockRequest) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *SetStoreFromContentLockRequest) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

type SetStoreFromContentLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *SetStoreFromContentLockResponse) Reset() {
	*x = SetStoreFromContentLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStoreFromContentLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStoreFromContentLockResponse) ProtoMessage() {}

func (x *SetStoreFromContentLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStoreFromContentLockResponse.ProtoReflect.Descriptor instead.
func (*SetStoreFromContentLockResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{26}
}

func (x *SetStoreFromContentLockResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type RefreshStoreFromContentLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locality   string `protobuf:"bytes,1,opt,name=locality,proto3" json:"locality,omitempty"`
	SourcePath string `protobuf:"bytes,2,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`
}

func (x *RefreshStoreFromContentLockRequest) Reset() {
	*x = RefreshStoreFromContentLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshStoreFromContentLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshStoreFromContentLockRequest) ProtoMessage() {}

func (x *RefreshStoreFromContentLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshStoreFromContentLockRequest.ProtoReflect.Descriptor instead.
func (*RefreshStoreFromContentLockRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{27}
}

func (x *RefreshStoreFromContentLockRequest) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *RefreshStoreFromContentLockRequest) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

type RefreshStoreFromContentLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *RefreshStoreFromContentLockResponse) Reset() {
	*x = RefreshStoreFromContentLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshStoreFromContentLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshStoreFromContentLockResponse) ProtoMessage() {}

func (x *RefreshStoreFromContentLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshStoreFromContentLockResponse.ProtoReflect.Descriptor instead.
func (*RefreshStoreFromContentLockResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{28}
}

func (x *RefreshStoreFromContentLockResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type RemoveStoreFromContentLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locality   string `protobuf:"bytes,1,opt,name=locality,proto3" json:"locality,omitempty"`
	SourcePath string `protobuf:"bytes,2,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`
}

func (x *RemoveStoreFromContentLockRequest) Reset() {
	*x = RemoveStoreFromContentLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveStoreFromContentLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStoreFromContentLockRequest) ProtoMessage() {}

func (x *RemoveStoreFromContentLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStoreFromContentLockRequest.ProtoReflect.Descriptor instead.
func (*RemoveStoreFromContentLockRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{29}
}

func (x *RemoveStoreFromContentLockRequest) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *RemoveStoreFromContentLockRequest) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

type RemoveStoreFromContentLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *RemoveStoreFromContentLockResponse) Reset() {
	*x = RemoveStoreFromContentLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveStoreFromContentLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStoreFromContentLockResponse) ProtoMessage() {}

func (x *RemoveStoreFromContentLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStoreFromContentLockResponse.ProtoReflect.Descriptor instead.
func (*RemoveStoreFromContentLockResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{30}
}

func (x *RemoveStoreFromContentLockResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type SetFsNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata *BlobFsMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *SetFsNodeRequest) Reset() {
	*x = SetFsNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFsNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFsNodeRequest) ProtoMessage() {}

func (x *SetFsNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFsNodeRequest.ProtoReflect.Descriptor instead.
func (*SetFsNodeRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{31}
}

func (x *SetFsNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetFsNodeRequest) GetMetadata() *BlobFsMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SetFsNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *SetFsNodeResponse) Reset() {
	*x = SetFsNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFsNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFsNodeResponse) ProtoMessage() {}

func (x *SetFsNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFsNodeResponse.ProtoReflect.Descriptor instead.
func (*SetFsNodeResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{32}
}

func (x *SetFsNodeResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type GetFsNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetFsNodeRequest) Reset() {
	*x = GetFsNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFsNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFsNodeRequest) ProtoMessage() {}

func (x *GetFsNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFsNodeRequest.ProtoReflect.Descriptor instead.
func (*GetFsNodeRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{33}
}

func (x *GetFsNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetFsNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool            `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Metadata *BlobFsMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetFsNodeResponse) Reset() {
	*x = GetFsNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFsNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFsNodeResponse) ProtoMessage() {}

func (x *GetFsNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFsNodeResponse.ProtoReflect.Descriptor instead.
func (*GetFsNodeResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{34}
}

func (x *GetFsNodeResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *GetFsNodeResponse) GetMetadata() *BlobFsMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetFsNodeChildrenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetFsNodeChildrenRequest) Reset() {
	*x = GetFsNodeChildrenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFsNodeChildrenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFsNodeChildrenRequest) ProtoMessage() {}

func (x *GetFsNodeChildrenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFsNodeChildrenRequest.ProtoReflect.Descriptor instead.
func (*GetFsNodeChildrenRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{35}
}

func (x *GetFsNodeChildrenRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetFsNodeChildrenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool              `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Children []*BlobFsMetadata `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *GetFsNodeChildrenResponse) Reset() {
	*x = GetFsNodeChildrenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFsNodeChildrenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFsNodeChildrenResponse) ProtoMessage() {}

func (x *GetFsNodeChildrenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFsNodeChildrenResponse.ProtoReflect.Descriptor instead.
func (*GetFsNodeChildrenResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{36}
}

func (x *GetFsNodeChildrenResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *GetFsNodeChildrenResponse) GetChildren() []*BlobFsMetadata {
	if x != nil {
		return x.Children
	}
	return nil
}

type AddFsNodeChildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid string `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Id  string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddFsNodeChildRequest) Reset() {
	*x = AddFsNodeChildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFsNodeChildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFsNodeChildRequest) ProtoMessage() {}

func (x *AddFsNodeChildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFsNodeChildRequest.ProtoReflect.Descriptor instead.
func (*AddFsNodeChildRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{37}
}

func (x *AddFsNodeChildRequest) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *AddFsNodeChildRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AddFsNodeChildResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *AddFsNodeChildResponse) Reset() {
	*x = AddFsNodeChildResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFsNodeChildResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFsNodeChildResponse) ProtoMessage() {}

func (x *AddFsNodeChildResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFsNodeChildResponse.ProtoReflect.Descriptor instead.
func (*AddFsNodeChildResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{38}
}

func (x *AddFsNodeChildResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type RemoveFsNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveFsNodeRequest) Reset() {
	*x = RemoveFsNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFsNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFsNodeRequest) ProtoMessage() {}

func (x *RemoveFsNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFsNodeRequest.ProtoReflect.Descriptor instead.
func (*RemoveFsNodeRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{39}
}

func (x *RemoveFsNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveFsNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *RemoveFsNodeResponse) Reset() {
	*x = RemoveFsNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFsNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFsNodeResponse) ProtoMessage() {}

func (x *RemoveFsNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFsNodeResponse.ProtoReflect.Descriptor instead.
func (*RemoveFsNodeResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{40}
}

func (x *RemoveFsNodeResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type RemoveFsNodeChildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid string `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Id  string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveFsNodeChildRequest) Reset() {
	*x = RemoveFsNodeChildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFsNodeChildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFsNodeChildRequest) ProtoMessage() {}

func (x *RemoveFsNodeChildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFsNodeChildRequest.ProtoReflect.Descriptor instead.
func (*RemoveFsNodeChildRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{41}
}

func (x *RemoveFsNodeChildRequest) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *RemoveFsNodeChildRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveFsNodeChildResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *RemoveFsNodeChildResponse) Reset() {
	*x = RemoveFsNodeChildResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFsNodeChildResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFsNodeChildResponse) ProtoMessage() {}

func (x *RemoveFsNodeChildResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFsNodeChildResponse.ProtoReflect.Descriptor instead.
func (*RemoveFsNodeChildResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{42}
}

func (x *RemoveFsNodeChildResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type BlobFsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid       string `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Path      string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Hash      string `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	Ino       uint64 `protobuf:"varint,6,opt,name=ino,proto3" json:"ino,omitempty"`
	Size      uint64 `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	Blocks    uint64 `protobuf:"varint,8,opt,name=blocks,proto3" json:"blocks,omitempty"`
	Atime     uint64 `protobuf:"varint,9,opt,name=atime,proto3" json:"atime,omitempty"`
	Mtime     uint64 `protobuf:"varint,10,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Ctime     uint64 `protobuf:"varint,11,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Atimensec uint32 `protobuf:"varint,12,opt,name=atimensec,proto3" json:"atimensec,omitempty"`
	Mtimensec uint32 `protobuf:"varint,13,opt,name=mtimensec,proto3" json:"mtimensec,omitempty"`
	Ctimensec uint32 `protobuf:"varint,14,opt,name=ctimensec,proto3" json:"ctimensec,omitempty"`
	Mode      uint32 `protobuf:"varint,15,opt,name=mode,proto3" json:"mode,omitempty"`
	Nlink     uint32 `protobuf:"varint,16,opt,name=nlink,proto3" json:"nlink,omitempty"`
	Rdev      uint32 `protobuf:"varint,17,opt,name=rdev,proto3" json:"rdev,omitempty"`
	Blksize   uint32 `protobuf:"varint,18,opt,name=blksize,proto3" json:"blksize,omitempty"`
	Padding   uint32 `protobuf:"varint,19,opt,name=padding,proto3" json:"padding,omitempty"`
	Uid       uint32 `protobuf:"varint,20,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid       uint32 `protobuf:"varint,21,opt,name=gid,proto3" json:"gid,omitempty"`
	Gen       uint64 `protobuf:"varint,22,opt,name=gen,proto3" json:"gen,omitempty"`
}

func (x *BlobFsMetadata) Reset() {
	*x = BlobFsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobFsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobFsMetadata) ProtoMessage() {}

func (x *BlobFsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobFsMetadata.ProtoReflect.Descriptor instead.
func (*BlobFsMetadata) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{43}
}

func (x *BlobFsMetadata) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *BlobFsMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlobFsMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlobFsMetadata) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *BlobFsMetadata) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BlobFsMetadata) GetIno() uint64 {
	if x != nil {
		return x.Ino
	}
	return 0
}

func (x *BlobFsMetadata) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BlobFsMetadata) GetBlocks() uint64 {
	if x != nil {
		return x.Blocks
	}
	return 0
}

func (x *BlobFsMetadata) GetAtime() uint64 {
	if x != nil {
		return x.Atime
	}
	return 0
}

func (x *BlobFsMetadata) GetMtime() uint64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *BlobFsMetadata) GetCtime() uint64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *BlobFsMetadata) GetAtimensec() uint32 {
	if x != nil {
		return x.Atimensec
	}
	return 0
}

func (x *BlobFsMetadata) GetMtimensec() uint32 {
	if x != nil {
		return x.Mtimensec
	}
	return 0
}

func (x *BlobFsMetadata) GetCtimensec() uint32 {
	if x != nil {
		return x.Ctimensec
	}
	return 0
}

func (x *BlobFsMetadata) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *BlobFsMetadata) GetNlink() uint32 {
	if x != nil {
		return x.Nlink
	}
	return 0
}

func (x *BlobFsMetadata) GetRdev() uint32 {
	if x != nil {
		return x.Rdev
	}
	return 0
}

func (x *BlobFsMetadata) GetBlksize() uint32 {
	if x != nil {
		return x.Blksize
	}
	return 0
}

func (x *BlobFsMetadata) GetPadding() uint32 {
	if x != nil {
		return x.Padding
	}
	return 0
}

func (x *BlobFsMetadata) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BlobFsMetadata) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *BlobFsMetadata) GetGen() uint64 {
	if x != nil {
		return x.Gen
	}
	return 0
}

type AddHostToIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locality string         `protobuf:"bytes,1,opt,name=locality,proto3" json:"locality,omitempty"`
	Host     *BlobCacheHost `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *AddHostToIndexRequest) Reset() {
	*x = AddHostToIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHostToIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHostToIndexRequest) ProtoMessage() {}

func (x *AddHostToIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHostToIndexRequest.ProtoReflect.Descriptor instead.
func (*AddHostToIndexRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{44}
}

func (x *AddHostToIndexRequest) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *AddHostToIndexRequest) GetHost() *BlobCacheHost {
	if x != nil {
		return x.Host
	}
	return nil
}

type AddHostToIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *AddHostToIndexResponse) Reset() {
	*x = AddHostToIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHostToIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHostToIndexResponse) ProtoMessage() {}

func (x *AddHostToIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHostToIndexResponse.ProtoReflect.Descriptor instead.
func (*AddHostToIndexResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{45}
}

func (x *AddHostToIndexResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type SetHostKeepAliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locality string         `protobuf:"bytes,1,opt,name=locality,proto3" json:"locality,omitempty"`
	Host     *BlobCacheHost `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *SetHostKeepAliveRequest) Reset() {
	*x = SetHostKeepAliveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHostKeepAliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHostKeepAliveRequest) ProtoMessage() {}

func (x *SetHostKeepAliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHostKeepAliveRequest.ProtoReflect.Descriptor instead.
func (*SetHostKeepAliveRequest) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{46}
}

func (x *SetHostKeepAliveRequest) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *SetHostKeepAliveRequest) GetHost() *BlobCacheHost {
	if x != nil {
		return x.Host
	}
	return nil
}

type SetHostKeepAliveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *SetHostKeepAliveResponse) Reset() {
	*x = SetHostKeepAliveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blobcache_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHostKeepAliveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHostKeepAliveResponse) ProtoMessage() {}

func (x *SetHostKeepAliveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blobcache_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHostKeepAliveResponse.ProtoReflect.Descriptor instead.
func (*SetHostKeepAliveResponse) Descriptor() ([]byte, []int) {
	return file_blobcache_proto_rawDescGZIP(), []int{47}
}

func (x *SetHostKeepAliveResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

var File_blobcache_proto protoreflect.FileDescriptor

var file_blobcache_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x22, 0x57, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x3e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x27, 0x0a, 0x11, 0x48, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x3c,
	0x0a, 0x12, 0x48, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x6f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x13,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x0a,
	0x14, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x9e, 0x01, 0x0a, 0x26, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x54, 0x6f, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x92, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x6f, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x22, 0x4f, 0x0a, 0x1d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x61, 0x0a, 0x1e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x22, 0x36, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x5b, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x2e, 0x0a, 0x05, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22,
	0x70, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x42, 0x6c,
	0x6f, 0x62, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0xc4, 0x03, 0x0a, 0x15, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x69,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x44, 0x69, 0x72, 0x12, 0x36, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x64, 0x69, 0x73, 0x6b, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x63, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x63,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x74, 0x6c, 0x53, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x74, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x0c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x32, 0x0a, 0x07, 0x6a, 0x75, 0x69, 0x63, 0x65, 0x66, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x4a, 0x75, 0x69,
	0x63, 0x65, 0x46, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x6a, 0x75, 0x69, 0x63,
	0x65, 0x66, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0x82, 0x01, 0x0a, 0x0d, 0x4a, 0x75, 0x69, 0x63, 0x65, 0x46, 0x53, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x73, 0x55, 0x72, 0x69, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xd6, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x92,
	0x01, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x10, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x63, 0x74, 0x22, 0x43, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f,
	0x6b, 0x22, 0x46, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x18, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x5d, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x31, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x61, 0x0a, 0x22, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x35, 0x0a, 0x23, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f,
	0x6b, 0x22, 0x60, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x34, 0x0a, 0x22, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x59, 0x0a, 0x10, 0x53, 0x65, 0x74,
	0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62,
	0x46, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x46, 0x73, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x6f, 0x6b, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x46, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x46, 0x73, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x6f, 0x6b, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x46, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x39, 0x0a, 0x15, 0x41, 0x64, 0x64,
	0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x46, 0x73, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x25,
	0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x3c, 0x0a,
	0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x19, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0xf0, 0x03, 0x0a, 0x0e, 0x42, 0x6c, 0x6f,
	0x62, 0x46, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x74,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x74, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x65, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x74, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x64, 0x65, 0x76, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x64, 0x65,
	0x76, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6b, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6b, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x65, 0x6e, 0x22, 0x61, 0x0a, 0x15, 0x41,
	0x64, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x2c, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x28,
	0x0a, 0x16, 0x41, 0x64, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x63, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x2c, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x2a, 0x0a,
	0x18, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x32, 0xa8, 0x10, 0x0a, 0x09, 0x42, 0x6c,
	0x6f, 0x62, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x48, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x48,
	0x61, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x48, 0x61, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x6f, 0x0a, 0x16, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x1e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x28,
	0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x62,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x62,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x2e, 0x62, 0x6c, 0x6f, 0x62,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62,
	0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x22, 0x2e, 0x62,
	0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x63, 0x6b, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x1a, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x6f, 0x62,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x1b, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x2d, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x46,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62,
	0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x73, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57,
	0x0a, 0x0e, 0x41, 0x64, 0x64, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x12, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12,
	0x23, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20,
	0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x6f,
	0x73, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x48, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x22, 0x2e, 0x62, 0x6c, 0x6f, 0x62,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x65,
	0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x62, 0x6c, 0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x62, 0x65, 0x61, 0x6d, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c,
	0x6f, 0x62, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blobcache_proto_rawDescOnce sync.Once
	file_blobcache_proto_rawDescData = file_blobcache_proto_rawDesc
)

func file_blobcache_proto_rawDescGZIP() []byte {
	file_blobcache_proto_rawDescOnce.Do(func() {
		file_blobcache_proto_rawDescData = protoimpl.X.CompressGZIP(file_blobcache_proto_rawDescData)
	})
	return file_blobcache_proto_rawDescData
}

var file_blobcache_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_blobcache_proto_goTypes = []interface{}{
	(*GetContentRequest)(nil),                      // 0: blobcache.GetContentRequest
	(*GetContentResponse)(nil),                     // 1: blobcache.GetContentResponse
	(*HasContentRequest)(nil),                      // 2: blobcache.HasContentRequest
	(*HasContentResponse)(nil),                     // 3: blobcache.HasContentResponse
	(*StoreContentRequest)(nil),                    // 4: blobcache.StoreContentRequest
	(*StoreContentResponse)(nil),                   // 5: blobcache.StoreContentResponse
	(*StoreContentFromSourceWithLockResponse)(nil), // 6: blobcache.StoreContentFromSourceWithLockResponse
	(*GetStateRequest)(nil),                        // 7: blobcache.GetStateRequest
	(*GetStateResponse)(nil),                       // 8: blobcache.GetStateResponse
	(*CacheSource)(nil),                            // 9: blobcache.CacheSource
	(*StoreContentFromSourceRequest)(nil),          // 10: blobcache.StoreContentFromSourceRequest
	(*StoreContentFromSourceResponse)(nil),         // 11: blobcache.StoreContentFromSourceResponse
	(*GetAvailableHostsRequest)(nil),               // 12: blobcache.GetAvailableHostsRequest
	(*GetAvailableHostsResponse)(nil),              // 13: blobcache.GetAvailableHostsResponse
	(*GetRegionConfigRequest)(nil),                 // 14: blobcache.GetRegionConfigRequest
	(*GetRegionConfigResponse)(nil),                // 15: blobcache.GetRegionConfigResponse
	(*BlobCacheServerConfig)(nil),                  // 16: blobcache.BlobCacheServerConfig
	(*SourceConfig)(nil),                           // 17: blobcache.SourceConfig
	(*JuiceFSConfig)(nil),                          // 18: blobcache.JuiceFSConfig
	(*MountPointConfig)(nil),                       // 19: blobcache.MountPointConfig
	(*BlobCacheHost)(nil),                          // 20: blobcache.BlobCacheHost
	(*SetClientLockRequest)(nil),                   // 21: blobcache.SetClientLockRequest
	(*SetClientLockResponse)(nil),                  // 22: blobcache.SetClientLockResponse
	(*RemoveClientLockRequest)(nil),                // 23: blobcache.RemoveClientLockRequest
	(*RemoveClientLockResponse)(nil),               // 24: blobcache.RemoveClientLockResponse
	(*SetStoreFromContentLockRequest)(nil),         // 25: blobcache.SetStoreFromContentLockRequest
	(*SetStoreFromContentLockResponse)(nil),        // 26: blobcache.SetStoreFromContentLockResponse
	(*RefreshStoreFromContentLockRequest)(nil),     // 27: blobcache.RefreshStoreFromContentLockRequest
	(*RefreshStoreFromContentLockResponse)(nil),    // 28: blobcache.RefreshStoreFromContentLockResponse
	(*RemoveStoreFromContentLockRequest)(nil),      // 29: blobcache.RemoveStoreFromContentLockRequest
	(*RemoveStoreFromContentLockResponse)(nil),     // 30: blobcache.RemoveStoreFromContentLockResponse
	(*SetFsNodeRequest)(nil),                       // 31: blobcache.SetFsNodeRequest
	(*SetFsNodeResponse)(nil),                      // 32: blobcache.SetFsNodeResponse
	(*GetFsNodeRequest)(nil),                       // 33: blobcache.GetFsNodeRequest
	(*GetFsNodeResponse)(nil),                      // 34: blobcache.GetFsNodeResponse
	(*GetFsNodeChildrenRequest)(nil),               // 35: blobcache.GetFsNodeChildrenRequest
	(*GetFsNodeChildrenResponse)(nil),              // 36: blobcache.GetFsNodeChildrenResponse
	(*AddFsNodeChildRequest)(nil),                  // 37: blobcache.AddFsNodeChildRequest
	(*AddFsNodeChildResponse)(nil),                 // 38: blobcache.AddFsNodeChildResponse
	(*RemoveFsNodeRequest)(nil),                    // 39: blobcache.RemoveFsNodeRequest
	(*RemoveFsNodeResponse)(nil),                   // 40: blobcache.RemoveFsNodeResponse
	(*RemoveFsNodeChildRequest)(nil),               // 41: blobcache.RemoveFsNodeChildRequest
	(*RemoveFsNodeChildResponse)(nil),              // 42: blobcache.RemoveFsNodeChildResponse
	(*BlobFsMetadata)(nil),                         // 43: blobcache.BlobFsMetadata
	(*AddHostToIndexRequest)(nil),                  // 44: blobcache.AddHostToIndexRequest
	(*AddHostToIndexResponse)(nil),                 // 45: blobcache.AddHostToIndexResponse
	(*SetHostKeepAliveRequest)(nil),                // 46: blobcache.SetHostKeepAliveRequest
	(*SetHostKeepAliveResponse)(nil),               // 47: blobcache.SetHostKeepAliveResponse
}
var file_blobcache_proto_depIdxs = []int32{
	9,  // 0: blobcache.StoreContentFromSourceRequest.source:type_name -> blobcache.CacheSource
	20, // 1: blobcache.GetAvailableHostsResponse.hosts:type_name -> blobcache.BlobCacheHost
	16, // 2: blobcache.GetRegionConfigResponse.server_config:type_name -> blobcache.BlobCacheServerConfig
	17, // 3: blobcache.BlobCacheServerConfig.sources:type_name -> blobcache.SourceConfig
	18, // 4: blobcache.SourceConfig.juicefs:type_name -> blobcache.JuiceFSConfig
	19, // 5: blobcache.SourceConfig.mountpoint:type_name -> blobcache.MountPointConfig
	43, // 6: blobcache.SetFsNodeRequest.metadata:type_name -> blobcache.BlobFsMetadata
	43, // 7: blobcache.GetFsNodeResponse.metadata:type_name -> blobcache.BlobFsMetadata
	43, // 8: blobcache.GetFsNodeChildrenResponse.children:type_name -> blobcache.BlobFsMetadata
	20, // 9: blobcache.AddHostToIndexRequest.host:type_name -> blobcache.BlobCacheHost
	20, // 10: blobcache.SetHostKeepAliveRequest.host:type_name -> blobcache.BlobCacheHost
	0,  // 11: blobcache.BlobCache.GetContent:input_type -> blobcache.GetContentRequest
	2,  // 12: blobcache.BlobCache.HasContent:input_type -> blobcache.HasContentRequest
	0,  // 13: blobcache.BlobCache.GetContentStream:input_type -> blobcache.GetContentRequest
	4,  // 14: blobcache.BlobCache.StoreContent:input_type -> blobcache.StoreContentRequest
	10, // 15: blobcache.BlobCache.StoreContentFromSource:input_type -> blobcache.StoreContentFromSourceRequest
	10, // 16: blobcache.BlobCache.StoreContentFromSourceWithLock:input_type -> blobcache.StoreContentFromSourceRequest
	7,  // 17: blobcache.BlobCache.GetState:input_type -> blobcache.GetStateRequest
	12, // 18: blobcache.BlobCache.GetAvailableHosts:input_type -> blobcache.GetAvailableHostsRequest
	14, // 19: blobcache.BlobCache.GetRegionConfig:input_type -> blobcache.GetRegionConfigRequest
	21, // 20: blobcache.BlobCache.SetClientLock:input_type -> blobcache.SetClientLockRequest
	23, // 21: blobcache.BlobCache.RemoveClientLock:input_type -> blobcache.RemoveClientLockRequest
	25, // 22: blobcache.BlobCache.SetStoreFromContentLock:input_type -> blobcache.SetStoreFromContentLockRequest
	29, // 23: blobcache.BlobCache.RemoveStoreFromContentLock:input_type -> blobcache.RemoveStoreFromContentLockRequest
	27, // 24: blobcache.BlobCache.RefreshStoreFromContentLock:input_type -> blobcache.RefreshStoreFromContentLockRequest
	31, // 25: blobcache.BlobCache.SetFsNode:input_type -> blobcache.SetFsNodeRequest
	33, // 26: blobcache.BlobCache.GetFsNode:input_type -> blobcache.GetFsNodeRequest
	35, // 27: blobcache.BlobCache.GetFsNodeChildren:input_type -> blobcache.GetFsNodeChildrenRequest
	37, // 28: blobcache.BlobCache.AddFsNodeChild:input_type -> blobcache.AddFsNodeChildRequest
	39, // 29: blobcache.BlobCache.RemoveFsNode:input_type -> blobcache.RemoveFsNodeRequest
	41, // 30: blobcache.BlobCache.RemoveFsNodeChild:input_type -> blobcache.RemoveFsNodeChildRequest
	44, // 31: blobcache.BlobCache.AddHostToIndex:input_type -> blobcache.AddHostToIndexRequest
	46, // 32: blobcache.BlobCache.SetHostKeepAlive:input_type -> blobcache.SetHostKeepAliveRequest
	1,  // 33: blobcache.BlobCache.GetContent:output_type -> blobcache.GetContentResponse
	3,  // 34: blobcache.BlobCache.HasContent:output_type -> blobcache.HasContentResponse
	1,  // 35: blobcache.BlobCache.GetContentStream:output_type -> blobcache.GetContentResponse
	5,  // 36: blobcache.BlobCache.StoreContent:output_type -> blobcache.StoreContentResponse
	11, // 37: blobcache.BlobCache.StoreContentFromSource:output_type -> blobcache.StoreContentFromSourceResponse
	6,  // 38: blobcache.BlobCache.StoreContentFromSourceWithLock:output_type -> blobcache.StoreContentFromSourceWithLockResponse
	8,  // 39: blobcache.BlobCache.GetState:output_type -> blobcache.GetStateResponse
	13, // 40: blobcache.BlobCache.GetAvailableHosts:output_type -> blobcache.GetAvailableHostsResponse
	15, // 41: blobcache.BlobCache.GetRegionConfig:output_type -> blobcache.GetRegionConfigResponse
	22, // 42: blobcache.BlobCache.SetClientLock:output_type -> blobcache.SetClientLockResponse
	24, // 43: blobcache.BlobCache.RemoveClientLock:output_type -> blobcache.RemoveClientLockResponse
	26, // 44: blobcache.BlobCache.SetStoreFromContentLock:output_type -> blobcache.SetStoreFromContentLockResponse
	30, // 45: blobcache.BlobCache.RemoveStoreFromContentLock:output_type -> blobcache.RemoveStoreFromContentLockResponse
	28, // 46: blobcache.BlobCache.RefreshStoreFromContentLock:output_type -> blobcache.RefreshStoreFromContentLockResponse
	32, // 47: blobcache.BlobCache.SetFsNode:output_type -> blobcache.SetFsNodeResponse
	34, // 48: blobcache.BlobCache.GetFsNode:output_type -> blobcache.GetFsNodeResponse
	36, // 49: blobcache.BlobCache.GetFsNodeChildren:output_type -> blobcache.GetFsNodeChildrenResponse
	38, // 50: blobcache.BlobCache.AddFsNodeChild:output_type -> blobcache.AddFsNodeChildResponse
	40, // 51: blobcache.BlobCache.RemoveFsNode:output_type -> blobcache.RemoveFsNodeResponse
	42, // 52: blobcache.BlobCache.RemoveFsNodeChild:output_type -> blobcache.RemoveFsNodeChildResponse
	45, // 53: blobcache.BlobCache.AddHostToIndex:output_type -> blobcache.AddHostToIndexResponse
	47, // 54: blobcache.BlobCache.SetHostKeepAlive:output_type -> blobcache.SetHostKeepAliveResponse
	33, // [33:55] is the sub-list for method output_type
	11, // [11:33] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_blobcache_proto_init() }
func file_blobcache_proto_init() {
	if File_blobcache_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blobcache_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasContentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreContentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreContentFromSourceWithLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreContentFromSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreContentFromSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableHostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableHostsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegionConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegionConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobCacheServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JuiceFSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountPointConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobCacheHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetClientLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetClientLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveClientLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveClientLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStoreFromContentLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStoreFromContentLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshStoreFromContentLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshStoreFromContentLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveStoreFromContentLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveStoreFromContentLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFsNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFsNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFsNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFsNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFsNodeChildrenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFsNodeChildrenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFsNodeChildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFsNodeChildResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFsNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFsNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFsNodeChildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFsNodeChildResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobFsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHostToIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHostToIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHostKeepAliveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blobcache_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHostKeepAliveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blobcache_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blobcache_proto_goTypes,
		DependencyIndexes: file_blobcache_proto_depIdxs,
		MessageInfos:      file_blobcache_proto_msgTypes,
	}.Build()
	File_blobcache_proto = out.File
	file_blobcache_proto_rawDesc = nil
	file_blobcache_proto_goTypes = nil
	file_blobcache_proto_depIdxs = nil
}
