syntax = "proto3";

option go_package = "github.com/beam-cloud/blobcache/proto";

package blobcache;

service BlobCache {
  // Cache RPCs
  rpc GetContent(GetContentRequest) returns (GetContentResponse) {}
  rpc GetContentStream(GetContentRequest) returns (stream GetContentResponse) {}
  rpc StoreContent(stream StoreContentRequest) returns (StoreContentResponse) {}
  rpc StoreContentFromSource(StoreContentFromSourceRequest)
      returns (StoreContentFromSourceResponse) {}
  rpc StoreContentFromSourceWithLock(StoreContentFromSourceRequest)
      returns (StoreContentFromSourceWithLockResponse) {}
  rpc GetState(GetStateRequest) returns (GetStateResponse) {}

  // Coordinator RPCs
  rpc GetAvailableHosts(GetAvailableHostsRequest)
      returns (GetAvailableHostsResponse) {}
  rpc SetClientLock(SetClientLockRequest) returns (SetClientLockResponse) {}
  rpc RemoveClientLock(RemoveClientLockRequest)
      returns (RemoveClientLockResponse) {}
  rpc SetStoreFromContentLock(SetStoreFromContentLockRequest)
      returns (SetStoreFromContentLockResponse) {}
  rpc RemoveStoreFromContentLock(RemoveStoreFromContentLockRequest)
      returns (RemoveStoreFromContentLockResponse) {}
  rpc RefreshStoreFromContentLock(RefreshStoreFromContentLockRequest)
      returns (RefreshStoreFromContentLockResponse) {}
  rpc SetFsNode(SetFsNodeRequest) returns (SetFsNodeResponse) {}
  rpc GetFsNode(GetFsNodeRequest) returns (GetFsNodeResponse) {}
  rpc GetFsNodeChildren(GetFsNodeChildrenRequest)
      returns (GetFsNodeChildrenResponse) {}
  rpc AddHostToIndex(AddHostToIndexRequest) returns (AddHostToIndexResponse) {}
  rpc SetHostKeepAlive(SetHostKeepAliveRequest)
      returns (SetHostKeepAliveResponse) {}
}

message GetContentRequest {
  string hash = 1;  // Hash of the content to retrieve
  int64 offset = 2; // Offset into the content
  int64 length = 3; // Length of the content to retrieve
}

message GetContentResponse {
  bool ok = 1;
  bytes content = 2; // Content data
}

message StoreContentRequest { bytes content = 1; }

message StoreContentResponse {
  bool ok = 1;
  string hash = 2; // Hash of the stored content
}

message StoreContentFromSourceWithLockResponse {
  string hash = 1; // Hash of the stored content
  bool ok = 2;
}

message GetStateRequest {}

message GetStateResponse {
  bool ok = 1;
  string version = 2;
  float capacity_usage_pct = 3;
  string private_ip_addr = 4;
}

message StoreContentFromSourceRequest {
  string source_path = 1;
  int64 source_offset = 2;
}

message StoreContentFromSourceResponse {
  bool ok = 1;
  string hash = 2;
}

message GetAvailableHostsRequest { string locality = 1; }

message GetAvailableHostsResponse {
  bool ok = 1;
  repeated BlobCacheHost hosts = 2;
}

message BlobCacheHost {
  string host_id = 1;
  string addr = 2;
  string private_ip_addr = 3;
  float capacity_usage_pct = 4;
}

message SetClientLockRequest {
  string hash = 1;
  string host_id = 2;
}

message SetClientLockResponse { bool ok = 1; }

message RemoveClientLockRequest {
  string hash = 1;
  string host_id = 2;
}

message RemoveClientLockResponse { bool ok = 1; }

message SetStoreFromContentLockRequest { string source_path = 1; }

message SetStoreFromContentLockResponse { bool ok = 1; }

message RefreshStoreFromContentLockRequest { string source_path = 1; }

message RefreshStoreFromContentLockResponse { bool ok = 1; }

message RemoveStoreFromContentLockRequest { string source_path = 1; }

message RemoveStoreFromContentLockResponse { bool ok = 1; }

message SetFsNodeRequest {
  string id = 1;
  BlobFsMetadata metadata = 2;
}

message SetFsNodeResponse { bool ok = 1; }

message GetFsNodeRequest { string id = 1; }

message GetFsNodeResponse {
  bool ok = 1;
  BlobFsMetadata metadata = 2;
}

message GetFsNodeChildrenRequest { string id = 1; }

message GetFsNodeChildrenResponse {
  bool ok = 1;
  repeated BlobFsMetadata children = 2;
}

message BlobFsMetadata {
  string pid = 1;
  string id = 2;
  string name = 3;
  string path = 4;
  string hash = 5;
  uint64 ino = 6;
  uint64 size = 7;
  uint64 blocks = 8;
  uint64 atime = 9;
  uint64 mtime = 10;
  uint64 ctime = 11;
  uint32 atimensec = 12;
  uint32 mtimensec = 13;
  uint32 ctimensec = 14;
  uint32 mode = 15;
  uint32 nlink = 16;
  uint32 rdev = 17;
  uint32 blksize = 18;
  uint32 padding = 19;
  uint32 uid = 20;
  uint32 gid = 21;
  uint64 gen = 22;
}

message AddHostToIndexRequest {
  string locality = 1;
  BlobCacheHost host = 2;
}

message AddHostToIndexResponse { bool ok = 1; }

message SetHostKeepAliveRequest {
  string locality = 1;
  BlobCacheHost host = 2;
}

message SetHostKeepAliveResponse { bool ok = 1; }
